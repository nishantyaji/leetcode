# Problem 200

from typing import List


class NumberOfIslands:
    def numIslands(self, grid: List[List[str]]) -> int:
        isle = '1'
        rows, cols = len(grid), len(grid[0])

        def get_neighbours(r: int, c: int, visited: str):
            neighbours = []
            if r > 0 and grid[r - 1][c] == isle:
                grid[r - 1][c] = visited
                neighbours.append([r - 1, c])
            if c > 0 and grid[r][c - 1] == isle:
                grid[r][c - 1] = visited
                neighbours.append([r, c - 1])
            if r < rows - 1 and grid[r + 1][c] == isle:
                grid[r + 1][c] = visited
                neighbours.append([r + 1, c])
            if c < cols - 1 and grid[r][c + 1] == isle:
                grid[r][c + 1] = visited
                neighbours.append([r, c + 1])
            return neighbours

        isle_count = 0
        for row in range(0, rows):
            for col in range(0, cols):
                if grid[row][col] == isle:
                    isle_count += 1
                    eval_list = [[row, col]]
                    grid[row][col] = str(isle_count + 1)
                    while len(eval_list) > 0:
                        [temp_row, temp_col] = eval_list[0]
                        del eval_list[0]
                        neighbours = get_neighbours(temp_row, temp_col, str(isle_count + 1))
                        eval_list = eval_list + neighbours

        return isle_count


if __name__ == '__main__':
    n = NumberOfIslands()
    # print(n.numIslands())

    # Ans=58
    print(n.numIslands(
        [["1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
         ["1", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "0", "0", "1", "0"],
         ["0", "0", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "1", "0", "1", "0"],
         ["0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "1", "0", "0", "1", "0", "0", "1"],
         ["0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
         ["1", "0", "0", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "1"],
         ["0", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1"],
         ["0", "0", "0", "1", "0", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "1", "1", "1", "0"],
         ["0", "0", "0", "0", "1", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "1"],
         ["0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0"],
         ["1", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "1", "0", "1", "0"],
         ["0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "0"],
         ["1", "1", "0", "1", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "1"],
         ["0", "1", "0", "0", "1", "1", "1", "0", "0", "0", "1", "1", "1", "1", "1", "0", "1", "0", "0", "0"],
         ["0", "0", "1", "1", "1", "0", "0", "0", "1", "1", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0"],
         ["1", "0", "0", "1", "0", "1", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "1"],
         ["1", "0", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0"],
         ["0", "1", "1", "0", "0", "0", "1", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "1", "0", "0"],
         ["0", "1", "0", "0", "0", "0", "1", "1", "0", "0", "1", "0", "1", "0", "0", "1", "0", "0", "1", "1"],
         ["0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "1", "0", "0", "0", "1", "1", "0", "0", "0"]]))
